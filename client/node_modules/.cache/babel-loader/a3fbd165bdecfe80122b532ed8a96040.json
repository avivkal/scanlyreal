{"ast":null,"code":"import { actionTypes } from '../actionTypes';\nimport axios from 'axios';\nimport { setCurrentUser, userExists, getCurrentUser } from '../../UtilityFunctions/functions';\nimport { store } from '../store';\nimport { loading, finishedLoading } from './loadingActions';\nimport { toggleSuccess } from './promptActions';\n\nconst updateWifiDetails = (username, password) => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const user = await axios.post('/wifi', {\n      email: getCurrentUser().email,\n      wifiUsername: username,\n      wifiPassword: password\n    });\n    dispatch(updateUsername(user.data));\n  } catch (error) {\n    dispatch(openPrompt('תקלה', error.response.data));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst updateSettings = (shufersalUsername, shufersalPassword, ramiLevyUsername, ramiLevyPassword, selection, sound) => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const user = await axios.post('/settings', {\n      email: getCurrentUser().email,\n      shufersalUsername,\n      shufersalPassword,\n      ramiLevyUsername,\n      ramiLevyPassword,\n      selection,\n      sound\n    });\n    await dispatch(updateUsername(user.data));\n    console.log(user.data);\n    dispatch(openPrompt('נשמר', 'כל המידע נשמר'));\n  } catch (error) {\n    dispatch(openPrompt('תקלה', error.response.data));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst updateUsername = user => {\n  setCurrentUser(user);\n  return {\n    type: actionTypes.UPDATE_USERNAME,\n    payload: user\n  };\n};\n\nconst openPrompt = (title, text, subjectOptional) => {\n  return {\n    type: actionTypes.OPEN_PROMPT,\n    title,\n    text,\n    subjectOptional\n  };\n};\n\nconst loggedIn = () => {\n  return {\n    type: actionTypes.LOGGED_IN\n  };\n};\n\nconst logIn = (email, password) => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const user = await axios.post('/login', {\n      email: email,\n      password: password\n    });\n    await dispatch(updateUsername(user.data));\n    await dispatch(loggedIn());\n  } catch (error) {\n    dispatch(openPrompt('תקלה', error.response.data));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst register = (email, password) => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const user = await axios.post('/register', {\n      email: email,\n      password: password\n    });\n    await dispatch(updateUsername(user.data));\n    await dispatch(loggedIn());\n  } catch (error) {\n    console.log(error);\n    dispatch(openPrompt('תקלה', error));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst getEmails = () => async dispatch => {\n  dispatch(loading());\n\n  try {\n    const userEmail = store.getState().main.currentUser.email;\n    await axios.get('/messages/sent/' + userEmail).then(sent => {\n      dispatch(updateSent(sent.data));\n    });\n    await axios.get('/messages/inbox/' + userEmail).then(inbox => {\n      dispatch(updateInbox(inbox.data));\n    });\n  } catch (error) {\n    dispatch(openPrompt('תקלה', error.response.data));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst updateInbox = inboxEmails => {\n  return {\n    type: actionTypes.UPDATE_INBOX,\n    payload: inboxEmails\n  };\n};\n\nconst sendMessage = (receiver, subject, message) => async dispatch => {\n  const currentUser = store.getState().main.currentUser;\n  dispatch(loading());\n\n  try {\n    const user = await axios.get('/findUsers/' + receiver);\n\n    if (userExists(user.data)) {\n      await axios.post('/messages/' + currentUser._id, {\n        sender: currentUser.email,\n        receiver: receiver,\n        message: message,\n        subject: subject,\n        creationDate: new Date()\n      });\n      dispatch(toggleSuccess());\n    } else {\n      dispatch(openPrompt('תקלה', 'Email not found'));\n    }\n  } catch (error) {\n    dispatch(openPrompt('תקלה', error));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nconst updateSent = sentEmails => {\n  return {\n    type: actionTypes.UPDATE_SENT,\n    payload: sentEmails\n  };\n};\n\nexport { updateUsername, loggedIn, logIn, register, getEmails, sendMessage, updateWifiDetails, updateSettings };","map":{"version":3,"sources":["C:/Users/avivk/Documents/GitHub/scanlyreal/client/src/Store/Actions/mainActions.js"],"names":["actionTypes","axios","setCurrentUser","userExists","getCurrentUser","store","loading","finishedLoading","toggleSuccess","updateWifiDetails","username","password","dispatch","user","post","email","wifiUsername","wifiPassword","updateUsername","data","error","openPrompt","response","updateSettings","shufersalUsername","shufersalPassword","ramiLevyUsername","ramiLevyPassword","selection","sound","console","log","type","UPDATE_USERNAME","payload","title","text","subjectOptional","OPEN_PROMPT","loggedIn","LOGGED_IN","logIn","register","getEmails","userEmail","getState","main","currentUser","get","then","sent","updateSent","inbox","updateInbox","inboxEmails","UPDATE_INBOX","sendMessage","receiver","subject","message","_id","sender","creationDate","Date","sentEmails","UPDATE_SENT"],"mappings":"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","sourcesContent":["import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { setCurrentUser, userExists,getCurrentUser } from '../../UtilityFunctions/functions'\r\nimport { store } from '../store'\r\nimport { loading, finishedLoading } from './loadingActions'\r\nimport { toggleSuccess } from './promptActions'\r\n\r\nconst updateWifiDetails = (username, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try{\r\n        const user = await axios.post('/wifi',{email:getCurrentUser().email,wifiUsername: username,wifiPassword: password })\r\n        dispatch(updateUsername(user.data));\r\n    }\r\n    catch(error){\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst updateSettings = (shufersalUsername,shufersalPassword,ramiLevyUsername,ramiLevyPassword,selection,sound) => async dispatch => {\r\n    dispatch(loading());\r\n    try{\r\n        const user = await axios.post('/settings',\r\n        {email:getCurrentUser().email,\r\n            shufersalUsername,\r\n            shufersalPassword,\r\n            ramiLevyUsername,\r\n            ramiLevyPassword,\r\n            selection,\r\n            sound\r\n         })\r\n        await dispatch(updateUsername(user.data));\r\n        console.log(user.data)\r\n\r\n        dispatch(openPrompt('נשמר','כל המידע נשמר'))\r\n    }\r\n    catch(error){\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst updateUsername = (user) => {\r\n    setCurrentUser(user);\r\n    return {\r\n        type: actionTypes.UPDATE_USERNAME,\r\n        payload: user\r\n    }\r\n}\r\n\r\nconst openPrompt = (title, text, subjectOptional) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT,\r\n        title,\r\n        text,\r\n        subjectOptional\r\n    }\r\n}\r\n\r\n\r\nconst loggedIn = () => {\r\n    return {\r\n        type: actionTypes.LOGGED_IN\r\n    }\r\n}\r\n\r\nconst logIn = (email, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const user = await axios.post('/login', { email: email, password: password })\r\n        await dispatch(updateUsername(user.data));\r\n        await dispatch(loggedIn());\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst register = (email, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const user = await axios.post('/register', { email: email, password: password })\r\n        await dispatch(updateUsername(user.data));\r\n        await dispatch(loggedIn());\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n        dispatch(openPrompt('תקלה', error))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst getEmails = () => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const userEmail = store.getState().main.currentUser.email;\r\n        await axios.get('/messages/sent/' + userEmail).then(sent => {\r\n            dispatch(updateSent(sent.data))\r\n        })\r\n        await axios.get('/messages/inbox/' + userEmail).then(inbox => {\r\n            dispatch(updateInbox(inbox.data))\r\n        })\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\n\r\n\r\nconst updateInbox = (inboxEmails) => {\r\n    return {\r\n        type: actionTypes.UPDATE_INBOX,\r\n        payload: inboxEmails\r\n    }\r\n}\r\n\r\nconst sendMessage = (receiver, subject, message) => async dispatch => {\r\n    const currentUser = store.getState().main.currentUser;\r\n    dispatch(loading())\r\n    try {\r\n        const user = await axios.get('/findUsers/' + receiver)\r\n        if (userExists(user.data)) {\r\n            await axios.post('/messages/' + currentUser._id,\r\n                {\r\n                    sender: currentUser.email,\r\n                    receiver: receiver,\r\n                    message: message,\r\n                    subject: subject,\r\n                    creationDate: new Date(),\r\n                });\r\n            dispatch(toggleSuccess());\r\n        }\r\n        else {\r\n            dispatch(openPrompt('תקלה', 'Email not found'))\r\n        }\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading())\r\n    }\r\n}\r\n\r\n\r\nconst updateSent = (sentEmails) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SENT,\r\n        payload: sentEmails\r\n    }\r\n}\r\n\r\nexport {\r\n    updateUsername,\r\n    loggedIn,\r\n    logIn,\r\n    register,\r\n    getEmails,\r\n    sendMessage,\r\n    updateWifiDetails,\r\n    updateSettings\r\n}\r\n"]},"metadata":{},"sourceType":"module"}