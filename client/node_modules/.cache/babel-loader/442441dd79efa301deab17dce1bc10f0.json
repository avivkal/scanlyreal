{"ast":null,"code":"import { actionTypes } from '../actionTypes';\nimport axios from 'axios';\nimport { store } from '../store';\nimport { loading, finishedLoading } from './loadingActions';\nimport { getEmails } from './mainActions';\n\nconst deleteMessagePrompt = () => {\n  return {\n    type: actionTypes.DELETE\n  };\n};\n\nconst toggleSuccess = () => {\n  return {\n    type: actionTypes.TOGGLE_SUCCESS\n  };\n};\n\nconst closePrompt = () => dispatch => {\n  dispatch(deletePromptFinished());\n  dispatch(closePromptFunc());\n};\n\nconst closePromptFunc = () => {\n  return {\n    type: actionTypes.CLOSE_PROMPT\n  };\n};\n\nconst openPromptDelete = (title, text) => {\n  return {\n    type: actionTypes.OPEN_PROMPT_DELETE,\n    title,\n    text\n  };\n};\n\nconst closePromptDelete = (title, text) => {\n  return {\n    type: actionTypes.CLOSE_PROMPT_DELETE,\n    title,\n    text\n  };\n};\n\nconst deletePrompt = () => {\n  return {\n    type: actionTypes.IS_DELETE\n  };\n};\n\nconst deletePromptFinished = () => {\n  return {\n    type: actionTypes.IS_DELETE_FINISHED\n  };\n};\n\nconst deletePromptSetId = id => {\n  return {\n    type: actionTypes.SET_ID_TO_DELETE,\n    payload: id\n  };\n};\n\nconst openPrompt = (title, text, subjectOptional) => {\n  return {\n    type: actionTypes.OPEN_PROMPT,\n    title,\n    text,\n    subjectOptional\n  };\n};\n\nconst deleteMessage = () => async dispatch => {\n  const id = store.getState().prompt.idToDelete;\n  dispatch(loading());\n\n  try {\n    axios.delete('/messages/' + id).then(data => {\n      dispatch(getEmails());\n    });\n  } catch (error) {\n    dispatch(openPrompt('Error', error.response.data));\n  } finally {\n    dispatch(finishedLoading());\n  }\n};\n\nexport { closePrompt, openPrompt, deleteMessagePrompt, openPromptDelete, closePromptDelete, toggleSuccess, deletePrompt, deletePromptSetId, deletePromptFinished, deleteMessage };","map":{"version":3,"sources":["C:/Users/avivk/Documents/GitHub/scanlyreal/client/src/Store/Actions/promptActions.js"],"names":["actionTypes","axios","store","loading","finishedLoading","getEmails","deleteMessagePrompt","type","DELETE","toggleSuccess","TOGGLE_SUCCESS","closePrompt","dispatch","deletePromptFinished","closePromptFunc","CLOSE_PROMPT","openPromptDelete","title","text","OPEN_PROMPT_DELETE","closePromptDelete","CLOSE_PROMPT_DELETE","deletePrompt","IS_DELETE","IS_DELETE_FINISHED","deletePromptSetId","id","SET_ID_TO_DELETE","payload","openPrompt","subjectOptional","OPEN_PROMPT","deleteMessage","getState","prompt","idToDelete","delete","then","data","error","response"],"mappings":"AAAA,SAASA,WAAT,QAA4B,gBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,kBAAzC;AACA,SAASC,SAAT,QAA0B,eAA1B;;AACA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEP,WAAW,CAACQ;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMC,aAAa,GAAG,MAAM;AACxB,SAAO;AACHF,IAAAA,IAAI,EAAEP,WAAW,CAACU;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMC,WAAW,GAAG,MAAMC,QAAQ,IAAI;AAClCA,EAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR;AACAD,EAAAA,QAAQ,CAACE,eAAe,EAAhB,CAAR;AAEH,CAJD;;AAMA,MAAMA,eAAe,GAAG,MAAM;AAC1B,SAAO;AACHP,IAAAA,IAAI,EAAEP,WAAW,CAACe;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACtC,SAAO;AACHX,IAAAA,IAAI,EAAEP,WAAW,CAACmB,kBADf;AAEHF,IAAAA,KAFG;AAGHC,IAAAA;AAHG,GAAP;AAMH,CAPD;;AASA,MAAME,iBAAiB,GAAG,CAACH,KAAD,EAAQC,IAAR,KAAiB;AACvC,SAAO;AACHX,IAAAA,IAAI,EAAEP,WAAW,CAACqB,mBADf;AAEHJ,IAAAA,KAFG;AAGHC,IAAAA;AAHG,GAAP;AAMH,CAPD;;AAQA,MAAMI,YAAY,GAAG,MAAM;AACvB,SAAO;AACHf,IAAAA,IAAI,EAAEP,WAAW,CAACuB;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMV,oBAAoB,GAAG,MAAM;AAC/B,SAAO;AACHN,IAAAA,IAAI,EAAEP,WAAW,CAACwB;AADf,GAAP;AAGH,CAJD;;AAMA,MAAMC,iBAAiB,GAAIC,EAAD,IAAQ;AAC9B,SAAO;AACHnB,IAAAA,IAAI,EAAEP,WAAW,CAAC2B,gBADf;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,UAAU,GAAG,CAACZ,KAAD,EAAQC,IAAR,EAAcY,eAAd,KAAkC;AACjD,SAAO;AACHvB,IAAAA,IAAI,EAAEP,WAAW,CAAC+B,WADf;AAEHd,IAAAA,KAFG;AAGHC,IAAAA,IAHG;AAIHY,IAAAA;AAJG,GAAP;AAMH,CAPD;;AASA,MAAME,aAAa,GAAG,MAAM,MAAMpB,QAAN,IAAkB;AAC1C,QAAMc,EAAE,GAAGxB,KAAK,CAAC+B,QAAN,GAAiBC,MAAjB,CAAwBC,UAAnC;AACAvB,EAAAA,QAAQ,CAACT,OAAO,EAAR,CAAR;;AACA,MAAI;AACAF,IAAAA,KAAK,CAACmC,MAAN,CAAa,eAAeV,EAA5B,EACKW,IADL,CACUC,IAAI,IAAI;AACV1B,MAAAA,QAAQ,CAACP,SAAS,EAAV,CAAR;AACH,KAHL;AAIH,GALD,CAMA,OAAOkC,KAAP,EAAc;AACV3B,IAAAA,QAAQ,CAACiB,UAAU,CAAC,OAAD,EAAUU,KAAK,CAACC,QAAN,CAAeF,IAAzB,CAAX,CAAR;AACH,GARD,SASQ;AACJ1B,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACH;AACJ,CAfD;;AAkBA,SACIO,WADJ,EAEIkB,UAFJ,EAGIvB,mBAHJ,EAIIU,gBAJJ,EAKII,iBALJ,EAMIX,aANJ,EAOIa,YAPJ,EAQIG,iBARJ,EASIZ,oBATJ,EAUImB,aAVJ","sourcesContent":["import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { store } from '../store'\r\nimport { loading, finishedLoading } from './loadingActions'\r\nimport { getEmails } from './mainActions'\r\nconst deleteMessagePrompt = () => {\r\n    return {\r\n        type: actionTypes.DELETE,\r\n    }\r\n}\r\n\r\nconst toggleSuccess = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_SUCCESS,\r\n    }\r\n}\r\n\r\nconst closePrompt = () => dispatch => {\r\n    dispatch(deletePromptFinished())\r\n    dispatch(closePromptFunc())\r\n\r\n}\r\n\r\nconst closePromptFunc = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_PROMPT,\r\n    }\r\n}\r\n\r\nconst openPromptDelete = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT_DELETE,\r\n        title,\r\n        text\r\n    }\r\n\r\n}\r\n\r\nconst closePromptDelete = (title, text) => {\r\n    return {\r\n        type: actionTypes.CLOSE_PROMPT_DELETE,\r\n        title,\r\n        text\r\n    }\r\n\r\n}\r\nconst deletePrompt = () => {\r\n    return {\r\n        type: actionTypes.IS_DELETE,\r\n    }\r\n}\r\n\r\nconst deletePromptFinished = () => {\r\n    return {\r\n        type: actionTypes.IS_DELETE_FINISHED,\r\n    }\r\n}\r\n\r\nconst deletePromptSetId = (id) => {\r\n    return {\r\n        type: actionTypes.SET_ID_TO_DELETE,\r\n        payload: id\r\n    }\r\n}\r\n\r\nconst openPrompt = (title, text, subjectOptional) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT,\r\n        title,\r\n        text,\r\n        subjectOptional\r\n    }\r\n}\r\n\r\nconst deleteMessage = () => async dispatch => {\r\n    const id = store.getState().prompt.idToDelete;\r\n    dispatch(loading());\r\n    try {\r\n        axios.delete('/messages/' + id)\r\n            .then(data => {\r\n                dispatch(getEmails())\r\n            })\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('Error', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    closePrompt,\r\n    openPrompt,\r\n    deleteMessagePrompt,\r\n    openPromptDelete,\r\n    closePromptDelete,\r\n    toggleSuccess,\r\n    deletePrompt,\r\n    deletePromptSetId,\r\n    deletePromptFinished,\r\n    deleteMessage\r\n}"]},"metadata":{},"sourceType":"module"}