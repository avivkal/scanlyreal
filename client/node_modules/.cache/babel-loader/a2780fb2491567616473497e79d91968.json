{"ast":null,"code":"var userExists=function userExists(user){return user!==undefined&&user!==null&&user!=='';};var isPartOfString=function isPartOfString(main,partOfMain,isReceiver){var mainStr=isReceiver?main.receiver:main.sender;if(mainStr.indexOf(partOfMain)>=0)return true;return false;};var messagesExist=function messagesExist(messages){return messages!==undefined&&messages!==null&&messages.length>0;};var setCurrentUser=function setCurrentUser(user){localStorage.setItem('currentUser',JSON.stringify(user));};var getCurrentUser=function getCurrentUser(){return JSON.parse(localStorage.getItem('currentUser'));};export{userExists,isPartOfString,setCurrentUser,getCurrentUser,messagesExist};","map":{"version":3,"sources":["C:/Users/avivk/Documents/GitHub/scanlyreal/client/src/UtilityFunctions/functions.js"],"names":["userExists","user","undefined","isPartOfString","main","partOfMain","isReceiver","mainStr","receiver","sender","indexOf","messagesExist","messages","length","setCurrentUser","localStorage","setItem","JSON","stringify","getCurrentUser","parse","getItem"],"mappings":"AAAA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAU,CACzB,MAAOA,CAAAA,IAAI,GAAKC,SAAT,EAAsBD,IAAI,GAAK,IAA/B,EAAuCA,IAAI,GAAK,EAAvD,CACH,CAFD,CAGA,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAOC,UAAP,CAAmBC,UAAnB,CAAkC,CACrD,GAAMC,CAAAA,OAAO,CAAGD,UAAU,CAAGF,IAAI,CAACI,QAAR,CAAmBJ,IAAI,CAACK,MAAlD,CACA,GAAIF,OAAO,CAACG,OAAR,CAAgBL,UAAhB,GAA+B,CAAnC,CACI,MAAO,KAAP,CACJ,MAAO,MAAP,CACH,CALD,CAOA,GAAMM,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,QAAD,CAAc,CAChC,MAAOA,CAAAA,QAAQ,GAAKV,SAAb,EAA0BU,QAAQ,GAAK,IAAvC,EAA+CA,QAAQ,CAACC,MAAT,CAAkB,CAAxE,CACH,CAFD,CAIA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACb,IAAD,CAAU,CAC7Bc,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoCC,IAAI,CAACC,SAAL,CAAejB,IAAf,CAApC,EACH,CAFD,CAGA,GAAMkB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,MAAOF,CAAAA,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,aAArB,CAAX,CAAP,CACH,CAFD,CAIA,OACIrB,UADJ,CAEIG,cAFJ,CAGIW,cAHJ,CAIIK,cAJJ,CAKIR,aALJ","sourcesContent":["const userExists = (user) => {\r\n    return user !== undefined && user !== null && user !== '';\r\n}\r\nconst isPartOfString = (main, partOfMain, isReceiver) => {\r\n    const mainStr = isReceiver ? main.receiver : main.sender;\r\n    if (mainStr.indexOf(partOfMain) >= 0)\r\n        return true\r\n    return false\r\n}\r\n\r\nconst messagesExist = (messages) => {\r\n    return messages !== undefined && messages !== null && messages.length > 0;\r\n}\r\n\r\nconst setCurrentUser = (user) => {\r\n    localStorage.setItem('currentUser', JSON.stringify(user))\r\n}\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem('currentUser'))\r\n}\r\n\r\nexport {\r\n    userExists,\r\n    isPartOfString,\r\n    setCurrentUser,\r\n    getCurrentUser,\r\n    messagesExist\r\n}"]},"metadata":{},"sourceType":"module"}