{"version":3,"sources":["Store/actionTypes.js","Constants/const.js","Store/Actions/loadingActions.js","Components/NavigationBar/NavigationBar.js","Components/Prompt/Prompt.js","App.js","Components/ErrorBoundary/ErrorBoundary.js","index.js","Store/Reducers/mainReducer.js","Store/Reducers/promptReducer.js","Store/Reducers/loadingReducer.js","Store/store.js","UtilityFunctions/functions.js","Store/Actions/promptActions.js","Store/Actions/mainActions.js"],"names":["actionTypes","UPDATE_USERNAME","LOGGED_IN","UPDATE_INBOX","UPDATE_SENT","CLOSE_PROMPT","OPEN_PROMPT","TOGGLE_SUCCESS","LOADING","FINISHED_LOADING","IS_DELETE","IS_DELETE_FINISHED","SET_ID_TO_DELETE","DASHBOARD_PATH","LOGIN_PATH","REGISTER_PATH","SETTINGS_PATH","WIFI_SETUP_PATH","DASHBOARD_NOT_ADDED_PATH","DASHBOARD_FILTERS_PATH","URL","finishedLoading","type","loading","NavigationBar","Navbar","collapseOnSelect","expand","bg","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","Component","Prompt","Modal","show","this","props","onHide","closePrompt","Header","Col","md","Title","promptTitle","Body","promptText","Footer","Button","onClick","connect","state","prompt","dispatch","promptActions","Login","React","lazy","Register","Dashboard","Settings","Wifi","DashboardNotAdded","DashboardFilters","App","fallback","Spinner","animation","path","exact","component","ErrorBoundary","hasError","error","info","setState","toString","children","axios","defaults","baseURL","ReactDOM","render","StrictMode","store","document","getElementById","initialState","currentUser","loggedIn","userInbox","userSent","mainReducer","action","payload","showSuccess","subjectOptional","isDelete","idToDelete","promptReducer","title","text","showDelete","loadingReducer","rootReducer","combineReducers","main","propmpReducer","createStore","applyMiddleware","thunk","userExists","user","undefined","setCurrentUser","localStorage","setItem","JSON","stringify","getCurrentUser","parse","getItem","toggleSuccess","deletePromptFinished","closePromptFunc","openPrompt","updateWifiDetails","username","password","a","post","email","wifiUsername","wifiPassword","updateUsername","data","response","updateSettings","shufersalUsername","shufersalPassword","ramiLevyUsername","ramiLevyPassword","selection","sound","console","log","logIn","register","getEmails","userEmail","getState","get","then","sent","updateSent","inbox","updateInbox","inboxEmails","sentEmails"],"mappings":"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","file":"static/js/main.fada0655.chunk.js","sourcesContent":["export const actionTypes = {\r\n    UPDATE_USERNAME: 'UPDATE_USERNAME',\r\n    LOGGED_IN: 'LOGGED_IN',\r\n    UPDATE_INBOX: 'UPDATE_INBOX',\r\n    UPDATE_SENT: 'UPDATE_SENT',\r\n    CLOSE_PROMPT: 'CLOSE_PROMPT',\r\n    OPEN_PROMPT: 'OPEN_PROMPT',\r\n    TOGGLE_SUCCESS: 'TOGGLE_SUCCESS',\r\n    LOADING: 'LOADING',\r\n    FINISHED_LOADING: 'FINISHED_LOADING',\r\n    IS_DELETE: 'IS_DELETE',\r\n    IS_DELETE_FINISHED: 'IS_DELETE_FINISHED',\r\n    SET_ID_TO_DELETE: 'SET_ID_TO_DELETE'\r\n}","export const DASHBOARD_PATH = '/';\r\nexport const LOGIN_PATH = '/login';\r\nexport const REGISTER_PATH = '/register';\r\nexport const SETTINGS_PATH = '/settings';\r\nexport const WIFI_SETUP_PATH = '/wifi';\r\nexport const DASHBOARD_NOT_ADDED_PATH = '/notAdded'\r\nexport const DASHBOARD_FILTERS_PATH = '/filters'\r\n// export const URL = 'http://localhost:5000';\r\nexport const URL = 'https://kalmanscan.herokuapp.com';\r\nexport const SHUFERSAL = \"shufersal\";\r\nexport const RAMI_LEVY = \"ramiLevy\";\r\n\r\n","import { actionTypes } from '../actionTypes'\r\n\r\nconst finishedLoading = () => {\r\n    return {\r\n        type: actionTypes.FINISHED_LOADING\r\n    }\r\n}\r\n\r\nconst loading = () => {\r\n    return {\r\n        type: actionTypes.LOADING\r\n    }\r\n}\r\n\r\nexport {\r\n    loading,\r\n    finishedLoading\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Button,NavDropdown } from 'react-bootstrap';\r\nimport { DASHBOARD_PATH, WIFI_SETUP_PATH, DASHBOARD_NOT_ADDED_PATH,DASHBOARD_FILTERS_PATH, SETTINGS_PATH } from '../../Constants/const'\r\n\r\nclass NavigationBar extends Component {\r\n    // state = {\r\n    //     show: false\r\n    // } \r\n    // showDropdown = (e)=>{\r\n    //     this.setState({show:true});\r\n    // }\r\n    // hideDropdown = e => {\r\n    //     this.setState({show:false});\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" >\r\n                <Navbar.Brand as={Link} to={DASHBOARD_PATH}>Scanly</Navbar.Brand>\r\n\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                    <Nav.Link as={Link} to={SETTINGS_PATH}>\r\n                            הגדרות </Nav.Link>\r\n                            <Nav.Link as={Link} to={WIFI_SETUP_PATH}>Wifi הגדרת</Nav.Link>\r\n                            <Nav.Link as={Link} to={DASHBOARD_FILTERS_PATH}>נתוני צריכה</Nav.Link>\r\n                            <Nav.Link as={Link} to={DASHBOARD_NOT_ADDED_PATH}>מוצרים שלא נוספו</Nav.Link>\r\n\r\n                        <Nav.Link as={Link} to={DASHBOARD_PATH}>מוצרים</Nav.Link>\r\n                        {/* <NavDropdown title=\"המוצרים שלי\" id=\"collasible-nav-dropdown\" show={this.state.show}\r\n   onMouseEnter={this.showDropdown} \r\n   onMouseLeave={this.hideDropdown}>\r\n        <NavDropdown.Item as={Link} to={DASHBOARD_FILTERS_PATH}>נתוני צריכה</NavDropdown.Item>\r\n        <NavDropdown.Item as={Link} to={DASHBOARD_NOT_ADDED_PATH}>מוצרים שלא נוספו</NavDropdown.Item>\r\n        <NavDropdown.Item as={Link} to={DASHBOARD_PATH}>מוצרים</NavDropdown.Item>\r\n      </NavDropdown> */}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NavigationBar;\r\n\r\n","import React, { Component } from 'react'\r\nimport { Button, Modal,Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport * as promptActions from '../../Store/Actions/promptActions'\r\nimport './prompt.scss'\r\nclass Prompt extends Component {\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} onHide={() => this.props.closePrompt()}> \r\n                <Modal.Header>\r\n                <Col md={12} className=\"float-right\">\r\n                    <Modal.Title className=\"align\">{this.props.promptTitle}</Modal.Title>\r\n                    </Col>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"align\">\r\n                    {this.props.promptText}</Modal.Body>\r\n                <Modal.Footer>\r\n                    \r\n                         <Button variant=\"secondary\" onClick={() => this.props.closePrompt()}>\r\n                            Close\r\n                </Button>\r\n                    \r\n\r\n\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        show: state.prompt.show,\r\n        promptTitle: state.prompt.promptTitle,\r\n        promptText: state.prompt.promptText,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        closePrompt: () => dispatch(promptActions.closePrompt()),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Prompt);\r\n","import React, { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport NavigationBar from './Components/NavigationBar/NavigationBar'\nimport { SETTINGS_PATH, LOGIN_PATH,DASHBOARD_FILTERS_PATH, REGISTER_PATH,DASHBOARD_NOT_ADDED_PATH, DASHBOARD_PATH, WIFI_SETUP_PATH } from './Constants/const'\nimport { Spinner } from 'react-bootstrap';\nimport './App.scss';\nimport Prompt from './Components/Prompt/Prompt'\n\nconst Login = React.lazy(() => import('./Components/Login/Login'));\nconst Register = React.lazy(() => import('./Components/Register/Register'));\nconst Dashboard = React.lazy(() => import('./Components/Dashboard/Dashboard'));\nconst Settings = React.lazy(() => import('./Components/Settings/Settings'));\nconst Wifi = React.lazy(() => import('./Components/Wifi/Wifi'));\nconst DashboardNotAdded = React.lazy(() => import('./Components/DashboardNotAdded/DashboardNotAdded'));\nconst DashboardFilters = React.lazy(() => import('./Components/DashboardFilters/DashboardFilters'));\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BrowserRouter>\n        <NavigationBar />\n        <Suspense fallback={<Spinner animation=\"border\" className=\"spinner\" />}>\n          <Prompt />\n          <Switch>\n          <Route path={DASHBOARD_PATH} exact component={Dashboard} />\n            <Route path={LOGIN_PATH} exact component={Login} />\n            <Route path={REGISTER_PATH} exact component={Register} />\n            <Route path={SETTINGS_PATH} exact component={Settings} />\n            <Route path={WIFI_SETUP_PATH} exact component={Wifi} />\n            <Route path={DASHBOARD_NOT_ADDED_PATH} exact component={DashboardNotAdded} />\n            <Route path={DASHBOARD_FILTERS_PATH} exact component={DashboardFilters} />\n          </Switch>\n        </Suspense>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true,\r\n      error: error,\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong. {this.state.error.toString()}</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './Store/store'\nimport { Provider } from 'react-redux'\nimport axios from 'axios'\nimport { URL } from './Constants/const'\nimport ErrorBoundary from './Components/ErrorBoundary/ErrorBoundary';\n\naxios.defaults.baseURL = URL;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ErrorBoundary>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n","const initialState = {\r\n    currentUser: {},\r\n    loggedIn: false,\r\n    userInbox: [],\r\n    userSent: [],\r\n    loading: false\r\n}\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE_USERNAME':\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload\r\n            }\r\n        case 'LOGGED_IN':\r\n            return {\r\n                ...state,\r\n                loggedIn: true\r\n            }\r\n        case 'UPDATE_INBOX':\r\n            return {\r\n                ...state,\r\n                userInbox: action.payload\r\n            }\r\n        case 'UPDATE_SENT':\r\n            return {\r\n                ...state,\r\n                userSent: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default mainReducer;","const initialState = {\r\n    show: false,\r\n    promptTitle: '',\r\n    promptText: '',\r\n    showSuccess: false,\r\n    subjectOptional: '',\r\n    isDelete: false,\r\n    idToDelete: ''\r\n}\r\n\r\nconst promptReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'CLOSE_PROMPT':\r\n            return {\r\n                ...state,\r\n                show: false\r\n            }\r\n        case 'OPEN_PROMPT':\r\n            return {\r\n                ...state,\r\n                show: true,\r\n                promptTitle: action.title,\r\n                promptText: action.text,\r\n                subjectOptional: action.subjectOptional\r\n            }\r\n        case 'OPEN_PROMPT_DELETE':\r\n            return {\r\n                ...state,\r\n                showDelete: true,\r\n                promptTitle: action.title,\r\n                promptText: action.text\r\n            }\r\n\r\n        case 'CLOSE_PROMPT_DELETE':\r\n            return {\r\n                ...state,\r\n                showDelete: false,\r\n            }\r\n        case 'TOGGLE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                showSuccess: !state.showSuccess,\r\n            }\r\n        case 'IS_DELETE':\r\n            return {\r\n                ...state,\r\n                isDelete: true,\r\n            }\r\n\r\n        case 'IS_DELETE_FINISHED':\r\n            return {\r\n                ...state,\r\n                isDelete: false,\r\n            }\r\n        case 'SET_ID_TO_DELETE':\r\n            return {\r\n                ...state,\r\n                idToDelete: action.payload,\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default promptReducer;","const initialState = {\r\n    loading: false\r\n}\r\n\r\nconst loadingReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'LOADING':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case 'FINISHED_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loadingReducer;\r\n\r\n","import mainReducer from './Reducers/mainReducer'\r\nimport propmpReducer from './Reducers/promptReducer'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport loadingReducer from './Reducers/loadingReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReducer,\r\n    prompt: propmpReducer,\r\n    loading: loadingReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","const userExists = (user) => {\r\n    return user !== undefined && user !== null && user !== '';\r\n}\r\nconst isPartOfString = (main, partOfMain, isReceiver) => {\r\n    const mainStr = isReceiver ? main.receiver : main.sender;\r\n    if (mainStr.indexOf(partOfMain) >= 0)\r\n        return true\r\n    return false\r\n}\r\n\r\nconst messagesExist = (messages) => {\r\n    return messages !== undefined && messages !== null && messages.length > 0;\r\n}\r\n\r\nconst setCurrentUser = (user) => {\r\n    localStorage.setItem('currentUser', JSON.stringify(user))\r\n}\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem('currentUser'))\r\n}\r\n\r\nexport {\r\n    userExists,\r\n    isPartOfString,\r\n    setCurrentUser,\r\n    getCurrentUser,\r\n    messagesExist\r\n}","import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { store } from '../store'\r\nimport { loading, finishedLoading } from './loadingActions'\r\nimport { getEmails } from './mainActions'\r\nconst deleteMessagePrompt = () => {\r\n    return {\r\n        type: actionTypes.DELETE,\r\n    }\r\n}\r\n\r\nconst toggleSuccess = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_SUCCESS,\r\n    }\r\n}\r\n\r\nconst closePrompt = () => dispatch => {\r\n    dispatch(deletePromptFinished())\r\n    dispatch(closePromptFunc())\r\n\r\n}\r\n\r\nconst closePromptFunc = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_PROMPT,\r\n    }\r\n}\r\n\r\nconst openPromptDelete = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT_DELETE,\r\n        title,\r\n        text\r\n    }\r\n\r\n}\r\n\r\nconst closePromptDelete = (title, text) => {\r\n    return {\r\n        type: actionTypes.CLOSE_PROMPT_DELETE,\r\n        title,\r\n        text\r\n    }\r\n\r\n}\r\nconst deletePrompt = () => {\r\n    return {\r\n        type: actionTypes.IS_DELETE,\r\n    }\r\n}\r\n\r\nconst deletePromptFinished = () => {\r\n    return {\r\n        type: actionTypes.IS_DELETE_FINISHED,\r\n    }\r\n}\r\n\r\nconst deletePromptSetId = (id) => {\r\n    return {\r\n        type: actionTypes.SET_ID_TO_DELETE,\r\n        payload: id\r\n    }\r\n}\r\n\r\nconst openPrompt = (title, text, subjectOptional) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT,\r\n        title,\r\n        text,\r\n        subjectOptional\r\n    }\r\n}\r\n\r\nconst deleteMessage = () => async dispatch => {\r\n    const id = store.getState().prompt.idToDelete;\r\n    dispatch(loading());\r\n    try {\r\n        axios.delete('/messages/' + id)\r\n            .then(data => {\r\n                dispatch(getEmails())\r\n            })\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('Error', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    closePrompt,\r\n    openPrompt,\r\n    deleteMessagePrompt,\r\n    openPromptDelete,\r\n    closePromptDelete,\r\n    toggleSuccess,\r\n    deletePrompt,\r\n    deletePromptSetId,\r\n    deletePromptFinished,\r\n    deleteMessage\r\n}","import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { setCurrentUser, userExists,getCurrentUser } from '../../UtilityFunctions/functions'\r\nimport { store } from '../store'\r\nimport { loading, finishedLoading } from './loadingActions'\r\nimport { toggleSuccess } from './promptActions'\r\n\r\nconst updateWifiDetails = (username, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try{\r\n        const user = await axios.post('/wifi',{email:getCurrentUser().email,wifiUsername: username,wifiPassword: password })\r\n        dispatch(updateUsername(user.data));\r\n    }\r\n    catch(error){\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst updateSettings = (shufersalUsername,shufersalPassword,ramiLevyUsername,ramiLevyPassword,selection,sound) => async dispatch => {\r\n    dispatch(loading());\r\n    try{\r\n        const user = await axios.post('/settings',\r\n        {email:getCurrentUser().email,\r\n            shufersalUsername,\r\n            shufersalPassword,\r\n            ramiLevyUsername,\r\n            ramiLevyPassword,\r\n            selection,\r\n            sound\r\n         })\r\n        await dispatch(updateUsername(user.data));\r\n        console.log(user.data)\r\n\r\n        dispatch(openPrompt('נשמר','כל המידע נשמר'))\r\n    }\r\n    catch(error){\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst updateUsername = (user) => {\r\n    setCurrentUser(user);\r\n    return {\r\n        type: actionTypes.UPDATE_USERNAME,\r\n        payload: user\r\n    }\r\n}\r\n\r\nconst openPrompt = (title, text, subjectOptional) => {\r\n    return {\r\n        type: actionTypes.OPEN_PROMPT,\r\n        title,\r\n        text,\r\n        subjectOptional\r\n    }\r\n}\r\n\r\n\r\nconst loggedIn = () => {\r\n    return {\r\n        type: actionTypes.LOGGED_IN\r\n    }\r\n}\r\n\r\nconst logIn = (email, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const user = await axios.post('/login', { email: email, password: password })\r\n        await dispatch(updateUsername(user.data));\r\n        await dispatch(loggedIn());\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst register = (email, password) => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const user = await axios.post('/register', { email: email, password: password })\r\n        await dispatch(updateUsername(user.data));\r\n        await dispatch(loggedIn());\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst getEmails = () => async dispatch => {\r\n    dispatch(loading());\r\n    try {\r\n        const userEmail = store.getState().main.currentUser.email;\r\n        await axios.get('/messages/sent/' + userEmail).then(sent => {\r\n            dispatch(updateSent(sent.data))\r\n        })\r\n        await axios.get('/messages/inbox/' + userEmail).then(inbox => {\r\n            dispatch(updateInbox(inbox.data))\r\n        })\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error.response.data))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\n\r\n\r\nconst updateInbox = (inboxEmails) => {\r\n    return {\r\n        type: actionTypes.UPDATE_INBOX,\r\n        payload: inboxEmails\r\n    }\r\n}\r\n\r\nconst sendMessage = (receiver, subject, message) => async dispatch => {\r\n    const currentUser = store.getState().main.currentUser;\r\n    dispatch(loading())\r\n    try {\r\n        const user = await axios.get('/findUsers/' + receiver)\r\n        if (userExists(user.data)) {\r\n            await axios.post('/messages/' + currentUser._id,\r\n                {\r\n                    sender: currentUser.email,\r\n                    receiver: receiver,\r\n                    message: message,\r\n                    subject: subject,\r\n                    creationDate: new Date(),\r\n                });\r\n            dispatch(toggleSuccess());\r\n        }\r\n        else {\r\n            dispatch(openPrompt('תקלה', 'Email not found'))\r\n        }\r\n    }\r\n    catch (error) {\r\n        dispatch(openPrompt('תקלה', error))\r\n    }\r\n    finally {\r\n        dispatch(finishedLoading())\r\n    }\r\n}\r\n\r\n\r\nconst updateSent = (sentEmails) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SENT,\r\n        payload: sentEmails\r\n    }\r\n}\r\n\r\nexport {\r\n    updateUsername,\r\n    loggedIn,\r\n    logIn,\r\n    register,\r\n    getEmails,\r\n    sendMessage,\r\n    updateWifiDetails,\r\n    updateSettings\r\n}\r\n"],"sourceRoot":""}